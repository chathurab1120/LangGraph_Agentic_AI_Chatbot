---
description: How  we should like the code style and architect 
globs: 
alwaysApply: false
---
# Unified Code Style and Architecture Rules

# General Code Style Rules
rules:
  # Enforce Consistent Naming Conventions
  naming:
    # Frontend/React
    react:
      components: PascalCase
      hooks: camelCase
      utils: camelCase
      types: PascalCase
      interfaces: PascalCase
      constants: UPPER_CASE
      services: PascalCase
      repositories: PascalCase
      models: PascalCase

    # Python
    python:
      modules: snake_case
      packages: snake_case
      classes: PascalCase
      functions: snake_case
      variables: snake_case
      constants: UPPER_CASE
      type_vars: PascalCase
      private_members: _leading_underscore

    # SQL
    sql:
      tables: snake_case
      views: v_snake_case
      stored_procedures: sp_snake_case
      functions: fn_snake_case
      columns: snake_case
      primary_keys: pk_table_name
      foreign_keys: fk_reference_table
      indexes: idx_table_column

  # File Organization Rules
  files:
    # Frontend/React
    frontend:
      components:
        location: src/components
        naming: "{ComponentName}.tsx"
      hooks:
        location: src/hooks
        naming: "use{HookName}.ts"
      pages:
        location: src/pages
        naming: "{PageName}Page.tsx"
      utils:
        location: src/utils
        naming: "{utilName}.ts"
      types:
        location: src/types
        naming: "index.ts"
      services:
        location: src/services
        naming: "{ServiceName}Service.ts"
      repositories:
        location: src/repositories
        naming: "{RepositoryName}Repository.ts"
      models:
        location: src/models
        naming: "{ModelName}.ts"
      api:
        location: src/api
        naming: "{ServiceName}Api.ts"

    # Python
    python:
      modules:
        location: src/modules
        naming: "{module_name}.py"
      packages:
        location: src/packages
        naming: "__init__.py"
      tests:
        location: tests
        naming: "test_{module_name}.py"
      config:
        location: config
        naming: "{config_name}_config.py"

    # Databricks
    databricks:
      notebooks:
        location: notebooks
        naming: "{NotebookName}.ipynb"
      pipelines:
        location: pipelines
        naming: "{PipelineName}.json"
      config:
        location: config
        naming: "{ConfigName}.conf"

  # Import Order Rules
  imports:
    # Frontend/React
    react:
      order:
        - react
        - external libraries
        - components
        - hooks
        - services
        - repositories
        - models
        - utils
        - types
        - styles

    # Python
    python:
      order:
        - standard library
        - third-party packages
        - local modules
      style:
        - Use absolute imports
        - Group imports by type
        - Sort alphabetically within groups
        - One import per line for clarity

  # Component/Module Structure Rules
  structure:
    # Frontend/React
    react:
      component:
        - imports
        - types/interfaces
        - constants
        - hooks
        - component
        - styles
        - exports

    # Python
    python:
      module:
        - docstring
        - imports
        - constants
        - classes
        - functions
        - main execution
      class:
        - docstring
        - class attributes
        - __init__
        - properties
        - public methods
        - private methods
        - static/class methods

  # Error Handling Rules
  error_handling:
    # Frontend/React
    react:
      api: try/catch with error boundaries
      forms: validation with error messages
      async: Promise handling with loading states
      architecture:
        - Centralized error handling service
        - Error boundaries in app root

    # Python
    python:
      practices:
        - Use specific exceptions
        - Implement custom exceptions
        - Document error conditions
        - Provide context in error messages
      logging:
        framework: logging
        levels:
          - DEBUG: Development details
          - INFO: General operations
          - WARNING: Potential issues
          - ERROR: Recoverable errors
          - CRITICAL: System failures

    # SQL
    sql:
      practices:
        - Error handling in stored procedures
        - Transaction management
        - Constraint violations
        - Deadlock handling

# Data Processing and State Management
data_processing:
  # Frontend/React
  react:
    state:
      global: contexts
      local: useState/useReducer
      cache: react-query
    forms:
      validation: yup
      state: react-hook-form
      components: MUI

  # Python
  python:
    pandas:
      optimization:
        - Use appropriate dtypes
        - Vectorize operations
        - Avoid loops when possible
        - Use query() for filtering
      memory:
        - Use chunks for large files
        - Implement memory management
        - Clear unused variables
        - Use generators when appropriate
    pyspark:
      optimization:
        - Cache frequently used DataFrames
        - Use broadcast joins for small tables
        - Partition data appropriately
        - Minimize shuffling operations

  # SQL
  sql:
    optimization:
      practices:
        - Use CTEs for complex queries
        - Avoid SELECT *
        - Minimize subqueries
        - Use appropriate JOIN types
      indexing:
        strategy:
          - Index frequently filtered columns
          - Create composite indexes
          - Monitor index usage
          - Maintain statistics

  # Databricks
  databricks:
    delta_lake:
      optimization:
        - Use OPTIMIZE command
        - Implement Z-ORDER
        - Set appropriate partition sizes
        - Use data skipping
    spark:
      optimization:
        - Use appropriate persistence levels
        - Implement broadcast joins
        - Optimize shuffle partitions
        - Monitor stage boundaries

# Testing Rules
testing:
  # Frontend/React
  react:
    framework: jest
    coverage: 90%
    types:
      - Unit tests
      - Integration tests
      - E2E tests
    best_practices:
      - Test Driven Development
      - Mock external services
      - Use testing library
      - Write meaningful assertions

  # Python
  python:
    framework: pytest
    coverage: 90%
    types:
      - Unit tests
      - Integration tests
      - Functional tests
      - Performance tests
    practices:
      - Use fixtures for test data
      - Mock external dependencies
      - Parametrize similar tests
      - Test edge cases

  # SQL
  sql:
    testing:
      - tSQLt for unit testing
      - pgTAP for PostgreSQL
      - Data consistency checks
      - Performance benchmarks
    coverage:
      - Query paths
      - Edge cases
      - Constraint validation
      - Transaction scenarios

  # Databricks
  databricks:
    testing:
      - Notebook testing
      - Pipeline validation
      - Data quality checks
      - Performance testing
    monitoring:
      - Job success rates
      - Resource utilization
      - Data quality metrics
      - Pipeline latency

# Security Rules
security:
  # Frontend/React
  react:
    auth: JWT tokens
    routes: protected routes with role-based access
    data:
      - Sanitize inputs
      - Validate inputs
      - Prevent XSS
    architecture:
      - Security middleware
      - HTTPS
      - Secure cookies

  # Python
  python:
    practices:
      - Input validation
      - Secure password handling
      - Session management
      - Rate limiting
    data_protection:
      - Encryption at rest
      - Secure communication
      - Access control
      - Audit logging

  # SQL
  sql:
    access_control:
      - Implement RBAC
      - Use schema-level security
      - Apply column-level encryption
      - Implement row-level security
    data_protection:
      - Sanitize inputs
      - Prevent SQL injection
      - Encrypt sensitive data
      - Audit access patterns

# Documentation Rules
documentation:
  # Frontend/React
  react:
    components: JSDoc
    functions: JSDoc
    types: TSDoc
    architecture:
      - Architecture document
      - UML diagrams
      - Setup guidelines
      - Deployment docs

  # Python
  python:
    format: Google style
    sections:
      - Args
      - Returns
      - Raises
      - Examples
      - Notes
    architecture:
      - System design
      - Module organization
      - Data flow
      - API documentation

  # SQL
  sql:
    format: Markdown
    sections:
      - Purpose
      - Parameters
      - Returns
      - Dependencies
      - Performance Notes
    schema:
      - ERD diagrams
      - Table relationships
      - Index documentation
      - Partition strategy

  # Databricks
  databricks:
    format: Markdown
    sections:
      - Overview
      - Parameters
      - Dependencies
      - Usage Examples
      - Performance Considerations
    architecture:
      - Pipeline design
      - Resource allocation
      - Optimization strategy
      - Monitoring approach

# Product Requirements Documentation (PRD)
prd:
  location: docs/prd
  structure:
    overview:
      - Executive Summary
      - Project Goals
      - System Architecture
      - Success Metrics
    features:
      location: features
      naming: "{FeatureName}.md"
      sections:
        - Description
        - Requirements
        - Technical Implementation
        - Data Models
        - Performance Considerations
        - Test Coverage
        - Dependencies
    architecture:
      system:
        - Components
        - Integration Points
        - Data Flows
        - Security Model
      frontend:
        - Component Architecture
        - State Management
        - Routing Strategy
        - API Integration
      backend:
        - Service Architecture
        - Database Design
        - Cache Strategy
        - Security Implementation
      data:
        - Data Models
        - Processing Pipeline
        - Storage Strategy
        - Analytics Architecture

  automation:
    documentation_generation:
      triggers:
        - New feature implementation
        - Architecture changes
        - Performance optimization
        - Security updates
      actions:
        - Update documentation
        - Generate diagrams
        - Update coverage reports
        - Refresh metrics

    templates:
      feature_template: |
        # Feature Name

        ## Description
        Detailed description of the feature.

        ## Requirements
        - Functional requirements
        - Technical requirements
        - Performance requirements
        - Security requirements

        ## Technical Implementation
        - Architecture details
        - Component design
        - Data models
        - API specifications

        ## Performance Considerations
        - Optimization strategy
        - Resource requirements
        - Scaling considerations
        - Monitoring approach

        ## Dependencies
        - System dependencies
        - External services
        - Third-party libraries
        - Infrastructure requirements

# Architectural and Design Principles
architecture:
  patterns:
    frontend:
      - Component-based architecture
      - Flux/Redux pattern
      - Container/Presenter pattern
      - HOC pattern
    backend:
      - SOLID principles
      - Repository pattern
      - Factory pattern
      - Strategy pattern
    data:
      - Data lake architecture
      - Lambda architecture
      - Medallion architecture
      - Event sourcing

  clean_code:
    principles:
      - Single responsibility
      - Open/closed principle
      - Interface segregation
      - Dependency injection
    practices:
      - Code readability
      - Modular design
      - Clear naming
      - Comprehensive documentation

  scalability:
    frontend:
      - Code splitting
      - Lazy loading
      - Caching strategy
      - State management
    backend:
      - Horizontal scaling
      - Load balancing
      - Caching layers
      - Async processing
    data:
      - Partitioning strategy
      - Distribution design
      - Pipeline scaling
      - Resource management

  performance:
    frontend:
      - Bundle optimization
      - Render optimization
      - Network optimization
      - Cache management
    backend:
      - Query optimization
      - Memory management
      - Connection pooling
      - Resource utilization
    data:
      - Processing optimization
      - Storage optimization
      - Query performance
      - Resource allocation

  devops:
    practices:
      - CI/CD automation
      - Infrastructure as code
      - Monitoring and alerting
      - Security scanning
    tools:
      - Version control
      - Build automation
      - Deployment automation
      - Monitoring systems

# Quality Control
quality_control:
  code_quality:
    frontend:
      - ESLint
      - Prettier
      - TypeScript
      - Sonar
    backend:
      - Pylint
      - Black
      - Mypy
      - Sonar
    data:
      - SQL linting
      - Schema validation
      - Data quality checks
      - Performance analysis

  monitoring:
    metrics:
      - Performance metrics
      - Error rates
      - Resource utilization
      - User metrics
    alerts:
      - Error thresholds
      - Performance thresholds
      - Resource thresholds
      - Security events

  automation:
    testing:
      - Automated unit tests
      - Integration tests
      - Performance tests
      - Security tests
    deployment:
      - Automated builds 
      - Deployment verification
      - Rollback procedures
      - Health checks
